pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-job-runner
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:latest
    - name: node
      image: node:18-bullseye
      command:
        - cat
      tty: true
      resources:
        requests:
          memory: "512Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "500m"
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command:
        - cat
      tty: true
"""
        }
    }

    environment {
        IMAGE_NAME = 'app-node'
        DOCKERFILE_PATH = './Dockerfile'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.COMMIT_ID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.BUILD_TAG = "${env.COMMIT_ID}-${env.BUILD_NUMBER}"
                    echo "Build Tag: ${env.BUILD_TAG}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                container('node') {
                    sh '''
                        echo "Instalando dependências..."
                        npm i
                    '''
                }
            }
        }

        stage('Build Application') {
            steps {
                container('node') {
                    sh '''
                        echo "Realizando build da aplicação..."
                        npm run build
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                container('node') {
                    sh '''
                        echo "Executando testes..."
                        npm run test
                    '''
                }
            }
        }

        stage('Build & Push Docker Image') {
          steps {
              container('kaniko') {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-ecr-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ],
                    string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')
                ]) {
                    sh '''
                        set -euo pipefail

                        # se não tiver AWS_REGION configurada em outro lugar, define default
                        : "${AWS_REGION:=us-east-1}"

                        # validações rápidas
                        if [ -z "$AWS_ACCOUNT_ID" ]; then
                          echo "ERROR: AWS_ACCOUNT_ID não set. Crie um credential 'aws-account-id' ou defina AWS_ACCOUNT_ID no ambiente do job."
                          exit 1
                        fi

                        ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                        echo "ECR_REGISTRY=${ECR_REGISTRY}"

                        echo "Construindo e enviando imagem para ${ECR_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}"

                        /kaniko/executor \
                          --dockerfile=$DOCKERFILE_PATH \
                          --context=dir://. \
                          --destination=$ECR_REGISTRY/$IMAGE_NAME:$BUILD_TAG \
                          --destination=$ECR_REGISTRY/$IMAGE_NAME:latest \
                          --cache=true \
                          --cache-ttl=24h \
                          --cleanup
                    '''
                }
              }
          }
        }

        stage('Update Kubernetes Manifests') {
            steps {
              container('node') {
                  sh '''

                      echo "Atualizando manifests Kubernetes..."

                      git clone https://github.com/joao1912/codigo-ao-container-infra.git k8s-manifests
                      cd k8s-manifests/k8s

                      if [ ! -f deployment.yaml ]; then
                          echo "Arquivo deployment.yaml não encontrado!"
                          exit 1
                      fi

                      echo "Atualizando imagem no deployment..."
                      echo "Nova imagem: $ECR_REGISTRY/$IMAGE_NAME:$BUILD_TAG"

                      # Atualiza a imagem usando yq ou sed
                      if command -v yq > /dev/null; then
                          yq eval ".spec.template.spec.containers[0].image = \\"$ECR_REGISTRY/$IMAGE_NAME:$BUILD_TAG\\"" -i deployment.yaml
                      else
                          sed -i "s|image: .*/$IMAGE_NAME:.*|image: $ECR_REGISTRY/$IMAGE_NAME:$BUILD_TAG|g" deployment.yaml
                      fi

                      if git diff --quiet deployment.yaml; then
                          echo "Nenhuma mudança detectada no deployment.yaml"
                          exit 0
                      fi

                      echo "Commitando mudanças..."
                      git add deployment.yaml
                      git commit -m "Deploy $IMAGE_NAME:$BUILD_TAG

      - Build: $BUILD_NUMBER
      - Commit: $COMMIT_ID
      - Pipeline: $BUILD_URL"

                      git push origin main
                      echo "Manifests atualizados com sucesso!"
                  '''
              }
          }
        }
    }

    post {
        success {
            script {
                echo "Deploy realizado com sucesso!"
                echo "Imagem: ${env.ECR_REGISTRY}/${env.IMAGE_NAME}:${env.BUILD_TAG}"
                if (env.BRANCH_NAME == 'main') {
                    echo "Aplicação deployada em produção!"
                }
            }
        }

        failure {
            script {
                echo "Pipeline falhou!"
                echo "Verifique os logs para mais detalhes"
            }
        }

        unstable {
            echo "Pipeline instável - alguns testes falharam"
        }
    }
}
